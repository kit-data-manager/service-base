
/*
 * Copyright 2021 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins { 
    id "io.freefair.lombok" version "6.6.1"
    id "io.freefair.maven-publish-java" version "6.6.1"
    id "io.spring.dependency-management" version "1.1.0" 
    id "org.owasp.dependencycheck" version "8.1.0"
    id "com.jfrog.bintray" version "1.8.5"
    id "java"
    id "jacoco"
    // plugins for release and publishing to maven repo
    id "signing"
    id "net.researchgate.release" version "3.0.2"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id 'maven-publish'
}

ext { 
    springBootVersion = '2.7.7' 
    springDocVersion  = '1.6.14'
}

description = "Base service module containing entities, interfaces and helpers."
group = "edu.kit.datamanager"

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    archivesBaseName = 'service-base'
}

println "Building ${name} version: ${version}"
println "Running gradle version: $gradle.gradleVersion"
println "JDK version: ${JavaVersion.current()}"

repositories {
    mavenLocal()   
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-amqp"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.cloud:spring-cloud-gateway-mvc:3.1.4"

    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"

    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.14.1"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.14.1"

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.14.1"
   
    implementation "com.github.dozermapper:dozer-core:6.5.2"

    //keycloak
    implementation "com.nimbusds:nimbus-jose-jwt:9.28"
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    implementation "io.jsonwebtoken:jjwt-impl:0.11.5"
    implementation "io.jsonwebtoken:jjwt-jackson:0.11.5"

    implementation "com.github.java-json-tools:json-patch:1.13"
   
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "commons-validator:commons-validator:1.7"
    implementation "commons-io:commons-io:2.11.0"
    // http client uses commons-codec
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
     
    implementation "org.apache.commons:commons-collections4:4.4"
   
    //Java 11 Support 
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    
    implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'

    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.javassist:javassist:3.29.2-GA'
   
    //test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-inline:4.11.0"
}

if (project.hasProperty('release')) {
    println 'Using \'release\' profile for building ' + project.getName()
    apply from: 'gradle/profile-deploy.gradle'
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    // Allow access to internal methods used by powerMockito
    // Will fail with Java17
    if (!JavaVersion.current().isJava8()) {
        jvmArgs '--illegal-access=permit'
    }
    testLogging {
        events 'started', 'passed'
    }
}
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [\
                //pure entity package currently not needed
                'org/datacite/**', \
                'org/purl/**', \
                //performance tests
                'edu/kit/datamanager/perf/**', \
                //remove AuthenticationHelper tests due to mocking -> code coverage cannot be determined
                //'edu/kit/datamanager/util/AuthenticationHelper*',
                //deprecated stuff
                'edu/kit/datamanager/util/DCTransformationHelper*',
                'edu/kit/datamanager/dao/ByExampleSpecification*',
                'edu/kit/datamanager/controller/hateoas/**',
                //exceptions 
                'edu/kit/datamanager/exceptions/**',
                'edu/kit/datamanager/service/impl/RabbitMQMessagingService*',
                'edu/kit/datamanager/configuration/**',
                'edu/kit/datamanager/service/IGenericService*'
            ])
        }))
    }
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
